package com.appcenter.uniclub.home

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.appcenter.uniclub.home.components.EventImageCarousel
import com.appcenter.uniclub.R
import com.appcenter.uniclub.home.components.ClubCardCarousel
import com.appcenter.uniclub.home.components.TopAppBarSection
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.ui.platform.LocalConfiguration
import androidx.navigation.NavController

@Composable
fun HomeScreen(modifier: Modifier = Modifier,
               navController: NavController) {
    LazyColumn(modifier = modifier
                .fillMaxSize()
    ) {
        item { TopAppBarSection() }

        item {
            Spacer(modifier = Modifier.height(13.dp))
            //ÏòàÏãú Ïù¥ÎØ∏ÏßÄ ÎÑ£Ïñ¥Îë† ÎÇòÏ§ëÏóê ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌïÑÏöî
            val sampleEvents = listOf(
                R.drawable.event_sample,
                R.drawable.event_sample_2,
                R.drawable.event_sample_3
            )
            EventImageCarousel(eventList = sampleEvents)
        }

        item {
            Spacer(modifier = Modifier.height(30.dp))
            RecommendTitle()
        }

        item {
            Spacer(modifier = Modifier.height(13.dp))
            //ÏòàÏãú Ïù¥ÎØ∏ÏßÄ ÎÑ£Ïñ¥Îë† ÎÇòÏ§ëÏóê ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌïÑÏöî
            val sampleClubs = listOf(
                R.drawable.club1 to "IUDC",
                R.drawable.club2 to "ÌïòÏñëÍ≤ÄÏ†ï",
                R.drawable.club3 to "Í∏∞Ïö∞Ìöå",
                R.drawable.club1 to "appcenter",
                R.drawable.club2 to "Î¥âÏÇ¨ÎèôÏïÑÎ¶¨",
                R.drawable.club3 to "ÌÅ¨Î†àÌçºÏä§(CREPERS)"
            )
            ClubCardCarousel(clubList = sampleClubs)
        }

        item {
            Spacer(modifier = Modifier.height(30.dp))
            CategorySection(onCategoryClick = { category ->
                // üîß Ïπ¥ÌÖåÍ≥†Î¶¨ ÌÅ¥Î¶≠ Ïãú ClubListÎ°ú Ïù¥Îèô
                navController.navigate("clublist/${category}")
            })
        }
    }
}

@Composable
fun RecommendTitle() {
    Text(
        text = "Ïù¥Îü∞ ÎèôÏïÑÎ¶¨Îäî Ïñ¥Îñ†ÏÑ∏Ïöî?",
        fontSize = 16.sp,
        fontWeight = FontWeight.Bold,
        color = Color(0xFF0167FF),
        lineHeight = 24.sp,
        modifier = Modifier
            .padding(start = 20.dp)
    )
}

@Composable
fun CategorySection(onCategoryClick: (String) -> Unit) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 20.dp, vertical = 16.dp) //Ï¢åÏö∞, ÏÉÅÌïò Ïó¨Î∞±
    ) {
        //ÏÉÅÎã®: 'Ïπ¥ÌÖåÍ≥†Î¶¨' Ï†úÎ™© + 'Ï†ÑÏ≤¥Î≥¥Í∏∞' Î≤ÑÌäº
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = "Ïπ¥ÌÖåÍ≥†Î¶¨",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF0167FF),
                lineHeight = 24.sp
            )

            Text(
                text = "Ï†ÑÏ≤¥Î≥¥Í∏∞",
                fontSize = 10.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFFB1B1B1),
                modifier = Modifier.clickable {
                    // TODO: ÌÅ¥Î¶≠ Ïãú ÎèôÏïÑÎ¶¨ Î¶¨Ïä§Ìä∏Î°ú Ïù¥Îèô Ï≤òÎ¶¨ ÏòàÏ†ï
                }
            )
        }

        Spacer(modifier = Modifier.height(15.dp))

        //ÏÑúÎ≤Ñ Ïó∞Îèô ÌõÑ Î≥ÄÍ≤Ω
        val categories = listOf(
            "ÍµêÏñëÌïôÏà†", "Ï∑®ÎØ∏Ï†ÑÏãú", "Ï≤¥Ïú°", "Ï¢ÖÍµê",
            "Î¥âÏÇ¨", "Î¨∏Ìôî", "+", "+"
        )

        //Ïπ¥ÌÖåÍ≥†Î¶¨ Î≤ÑÌäº Î∞∞Ïπò
        LazyVerticalGrid(
            columns = GridCells.Fixed(4), //Ìïú ÌñâÏóê 4Í∞ú Î≤ÑÌäº
            modifier = Modifier
                .fillMaxWidth()
                .height(180.dp),
            userScrollEnabled = false,
            horizontalArrangement = Arrangement.spacedBy(15.dp), //Í∞ÄÎ°úÍ∞ÑÍ≤©
            verticalArrangement = Arrangement.spacedBy(12.dp) //ÏÑ∏Î°úÍ∞ÑÍ≤©
        ) {
            items(categories) { label ->
                CategoryItem(label = label, onClick = { selectedLabel ->
                    onCategoryClick(selectedLabel)
                })
            }
        }
    }
}

@Composable
fun CategoryItem(label: String, onClick: (String) -> Unit) {
    //ÌîºÍ∑∏Îßà ÎπÑÏú® Î∞òÏòÅ
    val configuration = LocalConfiguration.current
    val screenWidthDp = configuration.screenWidthDp
    val buttonWidth = screenWidthDp * 68.39f / 360f
    val buttonHeight = screenWidthDp * 48.41f / 360f

    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        modifier = Modifier.width(buttonWidth.dp)
    ) {
        Box(
            modifier = Modifier
                .size(width = buttonWidth.dp, height = buttonHeight.dp)
                .clip(RoundedCornerShape(24.dp))
                .background(Color(0xFFFF9D00)) // Ï£ºÌô©ÏÉâ
                .clickable { onClick(label) },
            contentAlignment = Alignment.Center
        ) {
            //Ï∂îÌõÑ ÏïÑÏù¥ÏΩòÏúºÎ°ú Î≥ÄÍ≤Ω
            Text(
                text = label,
                fontSize = 12.sp,
                fontWeight = FontWeight.SemiBold,
                color = Color.White
            )
        }

        Spacer(modifier = Modifier.height(5.dp))

        Text(
            text = label,
            fontSize = 11.sp,
            fontWeight = FontWeight.Medium,
            color = Color(0xFFFF9D00),
            textAlign = TextAlign.Center
        )
    }
}

/*
@Preview(showBackground = true)
@Composable
fun HomeScreenPreview() {
    HomeScreen()
}
*/